service: frontend

provider:
  name: aws
  region: us-east-1
  stage: ${opt:stage, 'dev'}

plugins:
  - serverless-s3-sync

custom:
  domainName: elevator-robot.com
  hostedZoneId: Z0809465328WIUFUDSAKZ
  s3Sync:
    - bucketName: elevator-robot.com
      localDir: public

resources:
  Resources:
    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: elevator-robot.com
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        Tags:
          - Key: Name
            Value: elevator-robot.com
      DeletionPolicy: Delete

    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref FrontendBucket
        PolicyDocument:
          Statement:
            - Sid: CloudFrontReadAccess
              Effect: Allow
              Principal:
                CanonicalUser: !GetAtt FrontendOAI.S3CanonicalUserId
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::elevator-robot.com/*'

    FrontendOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI for accessing the S3 bucket

    FrontendDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt FrontendBucket.DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${FrontendOAI}
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          Aliases:
            - elevator-robot.com
            - www.elevator-robot.com
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn:
              Ref: FrontendCertificate
            SslSupportMethod: sni-only

    RecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: Z0809465328WIUFUDSAKZ
        RecordSets:
          - Name: elevator-robot.com
            Type: A
            AliasTarget:
              DNSName: !GetAtt FrontendDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: www.elevator-robot.com
            Type: CNAME
            AliasTarget:
              DNSName: !GetAtt FrontendDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2

    FrontendCertificate: # TODO: I think i will setup SSL and DNS in its own stack
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: elevator-robot.com
        SubjectAlternativeNames:
          - www.elevator-robot.com
        ValidationMethod: DNS
        DomainValidationOptions:
          - DomainName: elevator-robot.com
            HostedZoneId: Z0809465328WIUFUDSAKZ
          - DomainName: www.elevator-robot.com
            HostedZoneId: Z0809465328WIUFUDSAKZ
        Tags:
          - Key: Name
            Value: www.elevator-robot.com


# {
#     "Version": "2008-10-17",
#     "Statement": [
#         {
#             "Sid": "PublicReadGetObject",
#             "Effect": "Allow",
#             "Principal": "*",
#             "Action": "s3:GetObject",
#             "Resource": "arn:aws:s3:::www.elevator-robot.com/*"
#         },
#         {
#             "Sid": "EnforceBucketOwnership",
#             "Effect": "Deny",
#             "Principal": "*",
#             "Action": "s3:*",
#             "Resource": "arn:aws:s3:::www.elevator-robot.com/*",
#             "Condition": {
#                 "StringNotEquals": {
#                     "aws:PrincipalAccount": "764114738171"
#                 }
#             }
#         }
#     ]
# }
