org: aphexlog
app: merdok
service: merdok

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  tracing:
    apiGateway: true
    lambda: true
  websocketsApiName: ${self:service}-${self:provider.stage}
  websocketsApiRouteSelectionExpression: $request.body.action
  websocketsDescription: Custom Serverless Websockets
  environment:
    DYNAMODB_CONVERSATIONS_TABLE_NAME: ${self:service}-${self:provider.stage}-conversations
    DYNAMODB_WEBSOCKET_TABLE_NAME: ${self:service}-${self:provider.stage}-websockets
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: '*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - !GetAtt ConversationsTable.Arn
        - !GetAtt WebsocketConnectionsTable.Arn

custom:
  DOMAIN_NAME: elevator-robot.com
  pythonRequirements:
    layer: true
    fileName: api/requirements.txt
    dockerizePip: non-linux
    slim: true
    strip: false

package:
  individually: true
  include:
    - "api/"
  exclude:
    - "node_modules/**"
    - "test/**"
    - ".git/**"
    - ".serverless/**"
    - ".venv/**"
    - "serverless_sdk/**"
    - "client/**"
    - "package-lock.json"
    - "package.json"
    - "README.md"

functions:
  connect:
    handler: api/handler.connect
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: api/handler.disconnect
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - websocket:
          route: $disconnect
  sendMessage:
    handler: api/handler.send_message
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - websocket:
          route: sendMessage

resources:
  Resources:
    ConversationsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: conversationId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: conversationId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_CONVERSATIONS_TABLE_NAME}
    WebsocketConnectionsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-${self:provider.stage}-websockets
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool
    gatsbyAppAwsRegion:
      Type: AWS::SSM::Parameter
      Properties:
        Name: gatsby_app_aws_region
        Type: String
        Value: !Ref 'AWS::Region'
    gatsbyAppUserPoolId:
      Type: AWS::SSM::Parameter
      Properties:
        Name: gatsby_app_user_pool_id
        Type: String
        Value:
          Ref: CognitoUserPool
    gatsbyAppUserPoolWebClientId:
      Type: AWS::SSM::Parameter
      Properties:
        Name: gatsby_app_user_pool_web_client_id
        Type: String
        Value:
          Ref: CognitoUserPoolClient
    gatsbyAppWebsocketUrl:
      Type: AWS::SSM::Parameter
      Properties:
        Name: gatsby_app_websocket_url
        Type: String
        Value:
          Fn::Join:
            - ''
            - - 'wss://'
              - !Ref WebsocketsApi
              - '.execute-api.'
              - !Ref 'AWS::Region'
              - '.'
              - !Ref 'AWS::URLSuffix'
              - '/${self:provider.stage}'
    amplifySsmRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - 'amplify.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: amplify-ssm-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'ssm:GetParameters'
                    - 'ssm:GetParameter'
                  Resource: '*'

plugins:
  - serverless-python-requirements
